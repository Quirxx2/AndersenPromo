// Code generated by mockery v2.32.4. DO NOT EDIT.

package mocks

import (
	promo "AndersenPromo/internal"

	mock "github.com/stretchr/testify/mock"
)

// DBConnexion is an autogenerated mock type for the DBConnexion type
type DBConnexion struct {
	mock.Mock
}

// AddUser provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *DBConnexion) AddUser(_a0 string, _a1 string, _a2 promo.Grade, _a3 string) error {
	ret := _m.Called(_a0, _a1, _a2, _a3)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, promo.Grade, string) error); ok {
		r0 = rf(_a0, _a1, _a2, _a3)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteUser provides a mock function with given fields: _a0
func (_m *DBConnexion) DeleteUser(_a0 int) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllUsers provides a mock function with given fields:
func (_m *DBConnexion) GetAllUsers() (*[]promo.User, error) {
	ret := _m.Called()

	var r0 *[]promo.User
	var r1 error
	if rf, ok := ret.Get(0).(func() (*[]promo.User, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *[]promo.User); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]promo.User)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUser provides a mock function with given fields: _a0
func (_m *DBConnexion) GetUser(_a0 int) (*promo.User, error) {
	ret := _m.Called(_a0)

	var r0 *promo.User
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (*promo.User, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(int) *promo.User); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*promo.User)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateUser provides a mock function with given fields: _a0, _a1
func (_m *DBConnexion) UpdateUser(_a0 int, _a1 map[string]string) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, map[string]string) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewDBConnexion creates a new instance of DBConnexion. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDBConnexion(t interface {
	mock.TestingT
	Cleanup(func())
}) *DBConnexion {
	mock := &DBConnexion{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
